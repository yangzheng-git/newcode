class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int len = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (len < 2) return false;
        if (sum % 2 == 1) return false;
        vector<vector<bool>> dp(len, vector<bool>(sum / 2 + 1, false));
        for (int i = 0; i < dp.size(); i++) {
            dp[i][0] = true;
        }
        //dp[0][nums[0]] = true;
        for (int i = 1; i < dp.size(); i++) {
            for (int j = 1; j < dp[0].size(); j++) {
                if (j >= nums[i]) {
                    dp[i][j] = dp[i - 1][j] | dp[i - 1][j - nums[i ]];

                }
                else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[dp.size()-1][dp[0].size()-1];

    }
};
