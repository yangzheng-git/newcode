/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 //递归方法
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
          int vinlen=vin.size();
        if(vinlen==0||pre.size()==0)
            return NULL;
        vector<int> pre_left,pre_right,vin_left,vin_right;
        TreeNode *root=new TreeNode(pre[0]);
        int gen=0;
        for(int i=0;i<vinlen;i++)
        {
            if(vin[i]==pre[0])
            {
                gen=i;
                break;
            }
        }
        for(int i=0;i<gen;i++)
        {
            pre_left.push_back(pre[i+1]);
            vin_left.push_back(vin[i]);
        }
        for(int i=gen+1;i<vinlen;i++)
        {
            pre_right.push_back(pre[i]);
            vin_right.push_back(vin[i]);
         
        }
        root->left=reConstructBinaryTree(pre_left, vin_left);
        root->right=reConstructBinaryTree(pre_right, vin_right);
        return root;
       
    }
    
};
