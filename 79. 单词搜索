//深度搜索+回溯
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
       
        int flag = 0;
        int m=board.size(),n=board[0].size();
         vector<vector<bool>> check(m, vector<bool>(n, false));
        for (int i = m-1; i >= 0; i--) {
            for (int j = n-1; j>=0; j--)
            {
                dfs(board,check, word, 0, i, j, flag);
               
                if (flag == 1)
                {
                    return true;
                }
            }
        }
        return false;

    }
    void dfs(vector<vector<char>>& board, vector<vector<bool>>& check, string word, int index, int cur_i, int cur_j, int& flag)
    {
        if (cur_i < 0 || cur_j < 0 || cur_i == board.size() || cur_j == board[0].size() )
        {
            return;
        }
        if( board[cur_i][cur_j] != word[index]||check[cur_i][cur_j]==true)
        {
            return;
        }
        
        if (index == word.length()-1)
        {
            flag = 1;
            return;
        }
       
      
        check[cur_i][cur_j] = true;
        
           
            dfs(board,check, word, index + 1, cur_i-1, cur_j, flag);
             dfs(board,check, word, index + 1, cur_i+1, cur_j, flag);
              dfs(board,check, word, index + 1, cur_i, cur_j-1, flag);
               dfs(board,check, word, index + 1, cur_i,cur_j+1, flag);
            
        
        check[cur_i][cur_j] = false;

        
    }
};
