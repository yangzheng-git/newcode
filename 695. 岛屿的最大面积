//递归深度优先搜索
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 0; i != grid.size(); ++i) {
            for (int j = 0; j != grid[0].size(); ++j) {
                ans = max(ans, dfs(grid, i, j));
            }
        }
        return ans;

    }
    int dfs(vector<vector<int>>& grid, int cur_i, int cur_j)
    {
        if (cur_i<0 || cur_j<0 || cur_i>grid.size()-1 || cur_j>grid[0].size()-1 || grid[cur_i][cur_j] == 0)
        {
            return 0;
        }
        
        else
        {
            grid[cur_i][cur_j] = 0;
            int ans = 1;
            int di[4] = { 0,0,-1,1 };
            int dj[4] = { -1,1,0,0 };
            for (int i = 0; i < 4; i++)
            {
                int next_i =cur_i+ di[i];
                int next_j =cur_j+dj[i];
                ans = ans + dfs(grid, next_i, next_j);

            }
            return ans;
        }
        
  //通过站来实现深度优先搜索      
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid[0].size(); j++)
            {
                stack<int> stack_i;
                stack<int> stack_j;
                stack_i.push(i);
                stack_j.push(j);
                int cur = 0;
                while (!stack_j.empty())
                {
                    int cur_i = stack_i.top();
                    int cur_j = stack_j.top();
                    stack_i.pop();
                    stack_j.pop();
                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.size() || cur_j == grid[0].size() || grid[cur_i][cur_j] == 0)
                    {
                        continue;
                    }
                    else
                    {
                        grid[cur_i][cur_j] = 0;
                        cur++;
                        int di[4] = { 0, 0, 1, -1 };
                        int dj[4] = { 1, -1, 0, 0 };
                        for (int index = 0; index != 4; ++index) {
                            int next_i = cur_i + di[index], next_j = cur_j + dj[index];
                            stack_i.push(next_i);
                            stack_j.push(next_j);
                        }


                    }
                }
                ans = max(ans, cur);
            }
        }
        return ans;
    }
};


    }
};


//用队列实现的广度优先搜索
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid[0].size(); j++)
            {
                queue<int> queue_i;
                queue<int> queue_j;
                queue_i.push(i);
                queue_j.push(j);
                int cur = 0;
                while (!queue_j.empty())
                {
                    int cur_i = queue_i.front();
                    int cur_j = queue_j.front();
                    queue_i.pop();
                    queue_j.pop();
                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.size() || cur_j == grid[0].size() || grid[cur_i][cur_j] == 0)
                    {
                        continue;
                    }
                    else
                    {
                        grid[cur_i][cur_j] = 0;
                        cur++;
                        int di[4] = { 0, 0, 1, -1 };
                        int dj[4] = { 1, -1, 0, 0 };
                        for (int index = 0; index != 4; ++index) {
                            int next_i = cur_i + di[index], next_j = cur_j + dj[index];
                            queue_i.push(next_i);
                            queue_j.push(next_j);
                        }


                    }
                }
                ans = max(ans, cur);
            }
        }
        return ans;
    }
};
