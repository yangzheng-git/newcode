class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ret;
        ret.push_back(findleft(nums, target));
        ret.push_back(findright(nums, target));
        cout << ret[0] << endl;
        cout << ret[1] << endl;
        return ret;
    }

    int findleft(vector<int>& nums, int target)
    {
        int l = 0, r = nums.size()-1, mid;
        while (l <= r)
        {
            mid = l + (r - l) / 2;
            if (nums[mid] < target)
            {
                l = mid + 1;

            }
            else if (nums[mid] > target)
            {
                r = mid - 1;
            }
            else {
                while (mid >= 1)
                {
                    if (nums[mid] == nums[mid - 1])
                    {
                        mid--;
                    }
                    else
                    {
                        break;
                    }
                }
                return mid;
            }
        }
        return -1;
    }
    int findright(vector<int>& nums, int target)
    {
        int l = 0, r = nums.size()-1, mid;
        while (l <= r)
        {
            mid = l + (r - l) / 2;
            if (nums[mid] < target)
            {
                l = mid + 1;

            }
            else if (nums[mid] > target)
            {
                r = mid - 1;
            }
            else {
                while (mid <= (int)nums.size() - 2)
                {
                    if (nums[mid] == nums[mid + 1])
                    {
                        mid++;
                    }
                    else
                    {
                        break;
                    }
                }
                return mid;
            }
        }
        return -1;
    }
};
